// SMASH by JB
// This was originally written using a Samsung tablet as the controller for an exhibition demo
// The game is simple - use the mouse, SMASH the bricks.
// The score depends on how much angle you put on the ball
PROC mainSetup
PROC sounds
CYCLE 
  playMusic (gameMusic2, -1)
  CYCLE 
    PROC gameVariableReset
    PROC livesVariableReset
  REPEAT WHILE  NOT gameOn
  PROC drawWall
  PROC readySteadyGo
  CYCLE 
    framestart = TIME
    PROC drawBall
    PROC drawBat
    PROC checkBall
    PROC displayScore
    timetaken = TIME - framestart
    WAIT (0.0166 - (timetaken / 1000))
    UPDATE 
  REPEAT UNTIL gameOver
  PROC gameOver
REPEAT 
END 
// Draws the Bat sprite at the current mouse X Y positiom
DEF PROC drawBat
plotSprite (bat, MOUSEX, MOUSEY, 0)
ENDPROC 
// compare ball position to bat position
DEF PROC checkBall
x1 = MOUSEX - BX
x2 = BX - MOUSEX
y1 = MOUSEY - BY
y2 = BY - MOUSEY
miss = 0
PROC checkImpact
// Check to see if the ball is too far outside of the bat area
IF depth >= 21 THEN 
  xW = getSpriteW (ball) / 3 * 2
  yH = getSpriteH (ball) / 3 * 2
  IF ABS (x1) > xW OR ABS (x2) > xW OR ABS (y1) > yH OR ABS (y2) > yH THEN 
    playSample (missSound, 1, 0)
    lives = lives - 1
    miss = 1
    IF lives <= 0 THEN 
      gameOver = 1
      WIN = 0
    ENDIF 
    IF  NOT gameOver THEN PROC newBalls
  ENDIF 
  // if it is in the bat area then set the bounce direction based on how far from the centre of the bat
  IF  NOT miss THEN 
    xW = getSpriteW (ball)
    yH = getSpriteH (ball)
    IF BX < MOUSEX THEN b1xDir =  - x1 / 20
    IF BX > MOUSEX THEN b1xDir = x2 / 20
    IF BY < MOUSEY THEN b1yDir =  - y1 / 20
    IF BY > MOUSEY THEN b1yDir = y2 / 20
    playSample (hitSound, 1, 0)
  ENDIF 
ENDIF 
ENDPROC 
// display the ball on screen and scale it depending on its depth
DEF PROC drawBall
IF depth >= 21 OR depth <= 0 THEN 
  dir =  - dir
ENDIF 
depth = depth + dir
size = depth * 4
setSpriteSize (ball, size)
// Now check to see if the ball hits the wall and bounce back if it does
IF bPosX >= gWidth - 40 THEN 
  b1xDir =  - b1xDir
  playSample (wallRightSound, 1, 0)
ENDIF 
IF bPosX <= 40 THEN 
  b1xDir =  - b1xDir
  playSample (wallLeftSound, 1, 0)
ENDIF 
IF bPosY >= gHeight - 30 THEN 
  b1yDir =  - b1yDir
  playSample (wallTopSound, 1, 0)
ENDIF 
IF bPosY <= 30 THEN 
  b1yDir =  - b1yDir
  playSample (wallBottomSound, 1, 0)
ENDIF 
// calculate the amount of X, Y movement depending on ball size
bPosX = bPosX + b1xDir * (depth / 7)
bPosY = bPosY + b1yDir * (depth / 7)
BX = bPosX
BY = bPosY
// display the ball - the is a hidden small ball whicj is used to check the collision with bricks
plotSprite (ball, BX, BY, 0)
plotSprite (ball0, BX, BY, 0)
ENDPROC 
// draw the brick wall at the beginning
DEF PROC drawWall
brickID = 0
bx = 41
by = 32
FOR col = 0 TO 7 CYCLE 
  FOR row = 0 TO 7 CYCLE 
    bxx = bx + 150 * col
    byy = by + 82 * row
    setSpriteAngle (wall(brickID, 0), 0)
    plotSprite (wall(brickID, 0), bxx, byy, 0)
    wall(brickID, 1) = bxx
    wall(brickID, 2) = byy
    brickID = brickID + 1
  REPEAT 
REPEAT 
ENDPROC 
// check to see if the small ball is on a brick then the depth is at floor level
DEF PROC checkImpact
IF depth < 1 THEN 
  brickNum = spriteCollide (ball0)
  IF brickNum <> -1 AND brickNum < 65 THEN 
    IF  NOT brickSmash THEN 
      brickSmash = 1
      brickAnim = 1
      playSample (brickSmash, 1, 0)
    ENDIF 
  ELSE 
    playSample (noBrickSound, 1, 0)
  ENDIF 
ENDIF 
// if a brick is detected and the ball is floor level then SMASH and animate
IF brickSmash THEN 
  setSpriteAngle (wall(brickNum, 0), brickAnim * 30)
  plotSprite (wall(brickNum, 0), wall(brickNum, 1), wall(brickNum, 2), brickAnim)
  brickAnim = brickAnim + 1
  IF brickAnim > 6 THEN 
    hideSprite (brickNum)
    brickAnim = 1
    brickSmash = 0
    score = score + 50 * (INT (ABS (b1xDir) + ABS (b1yDir)))
    brickCount = brickCount - 1
    IF brickCount <= 0 THEN 
      WIN = 1
      gameOver = 1
    ENDIF 
  ENDIF 
ENDIF 
ENDPROC 
// Show and update the score at the top of the screen
DEF PROC displayScore
INK = Red
fontScale (2, 2)
printAt (6, 0);  "Lives ";  
INK = Pink
PRINT lives;  
INK = Red
printAt (35, 0);  "Score ";  
INK = Pink
PRINT score;  
INK = Red
printAt (60, 0);  "Bricks left ";  
INK = Pink
PRINT brickCount;  " ";  
ENDPROC 
// Display sequence before bat appears
DEF PROC readySteadyGo
stopMusic 
IF  NOT firstGo THEN 
  hideSprite (ball)
  hideSprite (ball0)
  hideSprite (bat)
ENDIF 
firstGo = 0
UPDATE 
playSample (startSound, 1, 0)
WAIT (1)
tempCount = 0
FOR tx = 0 TO 2 CYCLE 
  plotSprite (readySteadyGo, gw - getSpriteW (readySteadyGo) / 2, gh - getSpriteH (readySteadyGo) / 2, tx)
  UPDATE 
  CYCLE 
    tempCount = tempCount + 1
    PROC displayText(INT (RND (15) + 1))
    UPDATE 
  REPEAT UNTIL tempCount >= 10
  tempCount = 0
REPEAT 
playSample (playSound, 1, 0)
PROC displayText(7)
hideSprite (readySteadyGo)
playMusic (gameMusic1, -1)
ENDPROC 
// Set up the main variables, screen and display settings, sprites and sounds
DEF PROC mainSetup
setMode (1280, 720)
FULLSCREEN = 0
updateMode = 0
mouseOff 
CLS 
BX = gWidth / 2
BY = gHeight / 2
// setup brick sprites
gameOn = 0
DIM wall(64, 3)
FOR num = 0 TO 63 CYCLE 
  wall(num, 0) = newSprite (7)
  FOR brickID = 0 TO 6 CYCLE 
    brick$ = "brick" + CHR$ (48 + RND (2) + 1) + CHR$ (48 + brickID) + ".png"
    loadSprite (brick$, wall(num, 0), brickID)
  REPEAT 
  setSpriteTrans (wall(num, 0), 255, 0, 255)
REPEAT 
// setup ball sprites
ball0 = newSprite (1)
loadSprite ("ball_1.png", ball0, 0)
setSpriteTrans (ball0, 255, 0, 255)
setSpriteOrigin (ball0, getSpriteW (ball0) / 2, getSpriteH (ball0) / 2)
//
DIM ballZ(1, 3)
ball = newSprite (1)
loadSprite ("ball_20.png", ball, 0)
setSpriteTrans (ball, 255, 0, 255)
setSpriteOrigin (ball, getSpriteW (ball) / 2, getSpriteH (ball) / 2)
ballZ(0, 0) = BX
ballZ(0, 1) = BY
ballZ(0, 2) = 10
ballZ(0, 3) = 0
ballmiss = newSprite (2)
loadSprite ("ball_21.png", ballmiss, 0)
loadSprite ("ball_22.png", ballmiss, 1)
setSpriteTrans (ballmiss, 255, 0, 255)
setSpriteOrigin (ballmiss, getSpriteW (ball) / 2, getSpriteH (ball) / 2)
// setup bat sprites
bat = newSprite (1)
loadSprite ("bat.png", bat, 0)
setSpriteTrans (bat, 255, 0, 255)
setSpriteOrigin (bat, getSpriteW (bat) / 2, getSpriteH (bat) / 2)
// load background screen
screen = loadImage ("screen1.png")
// set up Ready Steady Go sprites
readySteadyGo = newSprite (3)
loadSprite ("ready.png", readySteadyGo, 0)
loadSprite ("steady.png", readySteadyGo, 1)
loadSprite ("go.png", readySteadyGo, 2)
setSpriteTrans (readySteadyGo, 255, 0, 255)
// Set up Intro sprites
introG1 = newSprite (1)
loadSprite ("fuzelogo.png", introG1, 0)
setSpriteTrans (introG1, 255, 255, 255)
introG2 = newSprite (1)
loadSprite ("smash.png", introG2, 0)
setSpriteTrans (introG2, 255, 0, 255)
introG3 = newSprite (1)
loadSprite ("jb.png", introG3, 0)
setSpriteTrans (introG3, 255, 255, 255)
winImg = newSprite (1)
loadSprite ("yes.png", winImg, 0)
setSpriteTrans (winImg, 255, 0, 255)
loseImg = newSprite (1)
loadSprite ("lose.png", loseImg, 0)
setSpriteTrans (loseImg, 255, 0, 255)
mTextShow$ = "Visit the FUZE Lair http://lair.fuze.co.uk"
ENDPROC 
// Reset the start new game variables
DEF PROC gameVariableReset
firstGo = 1
batID = 0
score = 0
lives = 3
gw = gWidth / 2
gh = gHeight / 2
brickCount = 64
mouse = 1
setMouse (gw, gh)
PROC intro
PROC livesVariableReset
PAPER = 0
CLS 
plotImage (screen, 0, 0)
ENDPROC 
// Reset just the required variables after losing a life
DEF PROC livesVariableReset
brickSmash = 0
brickAnim = 6
colPoint1 = 0
colPoint2 = 0
collide = 0
bPosX = gWidth / 2
bPosY = gHeight / 2
gw = bPosX
gh = bPosY
b1x = gw
b1y = gh
b1xDir = 1
b1yDir = 1
depth = 1
dir = 1
gameOver = 0
WIN = 0
ENDPROC 
// Set up and load the sounds and music
DEF PROC sounds
gameMusic1 = loadMusic ("track.mp3")
gameMusic2 = loadMusic ("robottrack.mp3")
winnerSound = loadSample ("winner.wav")
brickSmash = loadSample ("parClip2.wav")
noBrickSound = loadSample ("parClip3.wav")
missSound = loadSample ("parClip4.wav")
playSound = loadSample ("tenClip2.wav")
wallLeftSound = loadSample ("wall1.wav")
wallTopSound = loadSample ("wall2.wav")
wallRightSound = loadSample ("wall3.wav")
wallBottomSound = loadSample ("wall4.wav")
startSound = loadSample ("parClip6.wav")
hitSound = loadSample ("hit.wav")
setMusicVol (100)
ENDPROC 
// Display intro sequence
DEF PROC intro
igW1 = getSpriteW (introG1)
igH1 = getSpriteH (introG1)
igX1 =  - igW1
igY1 = gHeight - igH1 * 1.5
igDir1 = 14
igW2 = getSpriteW (introG2)
igH2 = getSpriteH (introG2)
igX2 = gWidth
igY2 = gHeight / 2 - igH2 / 2
igDir2 = -8
igW3 = getSpriteW (introG3)
igH3 = getSpriteH (introG3)
igX3 =  - igW3
igY3 = igH3 / 2
igDir3 = 4
counter = 200
counter2 = 0
CYCLE 
  counter = counter + 1
  IF counter > 200 + counter2 THEN 
    rgbColour (RND (255), RND (255), RND (255))
    hideSprite (introG1)
    hideSprite (introG2)
    hideSprite (introG3)
    //    UPDATE
    RECT (0, 20, gWidth, gHeight - 40, 1)
    counter = 0
    counter2 = RND (300)
  ENDIF 
  plotSprite (introG1, igX1, igY1, 0)
  plotSprite (introG2, igX2, igY2, 0)
  plotSprite (introG3, igX3, igY3, 0)
  UPDATE 
  igX1 = igX1 + igDir1
  igX2 = igX2 + igDir2
  igX3 = igX3 + igDir3
  IF igX1 <  - igW1 OR igX1 > gWidth THEN igDir1 =  - igDir1
  IF igX2 <  - igW2 OR igX2 > gWidth THEN igDir2 =  - igDir2
  IF igX3 <  - igW3 OR igX3 > gWidth THEN igDir3 =  - igDir3
  IF igX1 > gWidth / 2 - (igW1 / 2) - 30 AND igX1 < gWidth / 2 - (igW1 / 2) + 30 THEN 
    IF igDir1 < 0 THEN igDir1 = -1
    IF igDir1 > 0 THEN igDir1 = 1
  ELSE 
    IF igDir1 < 0 THEN igDir1 = -20
    IF igDir1 > 0 THEN igDir1 = 20
  ENDIF 
  IF igX2 > gWidth / 2 - (igW2 / 2) - 30 AND igX2 < gWidth / 2 - (igW2 / 2) + 30 THEN 
    IF igDir2 < 0 THEN igDir2 = -1
    IF igDir2 > 0 THEN igDir2 = 1
  ELSE 
    IF igDir2 < 0 THEN igDir2 = -10
    IF igDir2 > 0 THEN igDir2 = 10
  ENDIF 
  IF igX3 > gWidth / 2 - (igW3 / 2) - 30 AND igX3 < gWidth / 2 - (igW3 / 2) + 30 THEN 
    IF igDir3 < 0 THEN igDir3 = -1
    IF igDir3 > 0 THEN igDir3 = 1
  ELSE 
    IF igDir3 < 0 THEN igDir3 = -5
    IF igDir3 > 0 THEN igDir3 = 5
  ENDIF 
  touch = 0
  getMouse (mx, my, mb)
REPEAT UNTIL mb
gameOn = 1
hideSprite (introG1)
hideSprite (introG2)
hideSprite (introG3)
CLS2 
UPDATE 
ENDPROC 
// Display text in the middle of the screen
DEF PROC displayText(tCol)
fontScale (2, 2)
INK = tCol
printAt (tWidth / 2 - LEN (mTextShow$) / 2, 35);  mTextShow$;  
ENDPROC 
// Oh no - Game over. Clears everything neatly away and ends the game
DEF PROC gameOver
WAIT (.5)
stopMusic 
hideSprite (bat)
hideSprite (ball)
hideSprite (ball0)
IF WIN THEN 
  plotSprite (winImg, gw - getSpriteW (winImg) / 2, gh - getSpriteH (winImg) / 2, 0)
  playSample (winnerSound, 1, 0)
ELSE 
  plotSprite (loseImg, gw - getSpriteW (loseImg) / 2, gh - getSpriteH (loseImg) / 2, 0)
ENDIF 
UPDATE 
FOR num = 0 TO 63 CYCLE 
  hideSprite (wall(num, 0))
  UPDATE 
REPEAT 
WAIT (4)
hideSprite (winImg)
hideSprite (loseImg)
UPDATE 
CLS 
ENDPROC 
// Flashes red ball when missed
DEF PROC newBalls
FOR num = 0 TO 10 CYCLE 
  plotSprite (ballmiss, BX, BY, 0)
  WAIT (.01)
  UPDATE 
  plotSprite (ballmiss, BX, BY, 1)
  WAIT (.01)
  UPDATE 
REPEAT 
hideSprite (ballmiss)
PROC livesVariableReset
PROC readySteadyGo
UPDATE 
ENDPROC 
